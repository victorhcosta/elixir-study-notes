# Types

## Understanding Easily

In software development, types are an abstraction to represent some data.
Types are used to provide some funcionalities and caractestics to a data, for example the Float that's used to represent decimal numbers and List to represent a group of data.
In Elixir we have some modules to represent the types of data, and they provide for us some default functions like Integer.to_string that we can use to transform an integer into a string or Integer.is_odd to test if the number is odd or even.

## Elixir commom types

```elixir
# Integer and Float
# Both are used to represent numbers, the difference is while Integer are used to represent and integer number the float are used to represent a decimal number.

# Some examples of Integer are:
IO.inspect("The number 1 is an integer? #{is_integer(1)}")
IO.inspect("The number -1 is an integer? #{is_integer(-1)}")

# We also can have binary (starting with 0b) octa (starting with 0o) or hexadecimal (starting with 0x) representation of a number.
# 0b1010 = 10
IO.inspect("The number 0b1010 is an integer? #{is_integer(0b1010)} and represent #{0b1010}")
# 0xA = 10
IO.inspect("The number 0xA is an integer? #{is_integer(0xA)} and represent #{0xA}")
# 0o12 = 10
IO.inspect("The number 0o12 is an integer? #{is_integer(0o12)} and represent #{0o12}")

# Some examples of Float are:
IO.inspect("The number 1 is a float? #{is_float(1)}")
IO.inspect("The number -1 is a float? #{is_float(0.9)}")
IO.inspect("The number -1 is a float? #{is_float(-10.3)}")
IO.inspect("The number -1 is a float? #{is_float(4.0)}")
```

```elixir
# String

lang_name = "Elixir"

IO.inspect(String.valid?("Strings are used to represent some text, like the name of a city.
And they are delimited by double quotes, and encoded in UTF-8."))

IO.inspect("And we can use the" <> " to concatenate strings")

IO.inspect(
  "Another possibility that we have when using strings in #{lang_name} is to use # with {} to interpolate"
)
```

```elixir
# Charlist

# A charlist represents an list, where every character it's represented by a number.
inspect(~c"result in a charlsit", charlists: :as_list)
```

```elixir
# Bitstring and Binary

# Used to represent a sequency of bits, and they also are binaries.
IO.inspect("<<1>> is a bitstring? #{is_bitstring(<<1>>)}")
IO.inspect("<<1:16>> is a bitstring? #{is_bitstring(<<1::16>>)}")

# Binaries it's basicaly a specific case when the number of bits is divisible by eight.
IO.inspect("<<1::16>> is a binary? #{is_binary(<<1::16>>)}")
IO.inspect("<<3::4>> is a binary? #{is_binary(<<3::4>>)}")
IO.inspect("<<3::4>> is a bitstring? #{is_bitstring(<<3::4>>)}")
```

```elixir
# Atom

# A constant that have as value they own name.
IO.inspect("Examples of atoms: #{:ok} and #{:error} and #{:"this is an atom too"}")
```

```elixir
# Boolean

"Basically true or false, and the nil (null) it's considered as false in boolean contexts,
they all are atoms too"
```

```elixir
# [List] and {Tuple}

# A list and a tuple are used to represent collections of some values
# and they can handle any type of value.

# Lists can be concatenated using the ++/2:
IO.inspect([0] ++ [1, 2, 3] ++ [4, 5, 6] ++ [7, 8, 9])

# Lists can be subtracted using the --/2:
IO.inspect([1, true, 2, false, 3, true] -- [true, false])

IO.inspect("[1, 2, 3] is list? #{is_list([1, 2, 3])}")
IO.inspect("{1, 2, 3} is list? #{is_list({1, 2, 3})}")
IO.inspect("{1, 2, 3} is tuple? #{is_tuple({1, 2, 3})}")
IO.inspect("[1, 2, 3] is tuple? #{is_tuple([1, 2, 3])}")
```

Tuple is a "type of list", but they occupy contiguous spaces in memory, and this means accessing a tuple element by index or getting the tuple size is a fast operation.

So what is the difference between then and why/when I should to use List or Tuple?
While getting size or accessing an element by index is fast whit tuples, with lists do this it's slow.
On the other hand, manipulate the elements into tuples is expensive because it
requires creating a new tuple in memory.
So if the collection will be modyfied use a list it's more interesting.

```elixir
# A good example about the difference between operations using list and tuples are:

list = String.split("since the amount of elements returned depends on the input!")
tuple = String.split_at("since it always returns two entries, regardless of the input size!", 10)

IO.inspect("String.split return a list? #{is_list(list)}")
IO.inspect(list)

IO.inspect("String.split_at return a tuple? #{is_tuple(tuple)}")
IO.inspect(tuple)
```

Now let's talk about associative data structures. Associative data structures are able to associate a key to a certain value. Different languages call these different names like dictionaries, hashes, associative arrays, etc.

One example of this in Elixir it's the Map.

```elixir
# Maps

# A Map in Elixir are a collection of key-value where every key should be unique.
# A map is created using the %{} syntax.
# Maps allow any value as a key

%{name: "Alice", age: 30}
```
